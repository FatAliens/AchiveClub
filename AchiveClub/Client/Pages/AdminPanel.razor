@page "/admin"
@using AchiveClub.Shared.Models
@inject HttpClient Http

<Modal Closing="OnModalClosing" @ref="loginModal">
    <ModalContent Centered>
        <ModalTitle Padding="Padding.Is3">Введите ключ администратора</ModalTitle>
        <ModalBody>
            <TextEdit Placeholder="ключ администратора" @bind-Text="adminKey" />
        </ModalBody>
        <ModalFooter>
            <Button Block Color="Color.Success" Clicked="() => Login(adminKey)">Подтвердить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @bind-Visible="userEditVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit User</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <TextEdit Placeholder="FirstName" @bind-Text="@editableUser.FirstName" />
                <TextEdit Placeholder="LastName" @bind-Text="@editableUser.LastName" />
                <TextEdit Placeholder="Password" Role="TextRole.Password" @bind-Text="@editableUser.Password" />
                <Addons>
                    <Addon AddonType="AddonType.Start"><AddonLabel>@@</AddonLabel></Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit Placeholder="Email" Role="TextRole.Email" @bind-Text="@editableUser.Email" />
                    </Addon>
                </Addons>
            </Form>
        </ModalBody>
        <ModalFooter>
            <Button Block Color="Color.Success" Clicked="()=>PutUserAsync(editableUser)">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @bind-Visible="achiveEditVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Achive</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <TextEdit Placeholder="Title" @bind-Text="@editableAchive.Title" />
                <TextEdit Placeholder="Title" @bind-Text="@editableAchive.Description" />
                <TextEdit Placeholder="Title" @bind-Text="@editableAchive.XpString" />
                <TextEdit Placeholder="Title" @bind-Text="@editableAchive.LogoURL" Role="TextRole.Url" />
            </Form>
        </ModalBody>
        <ModalFooter>
            <Button Block Color="Color.Success" Clicked="()=>PutAchiveAsync(editableAchive)">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @bind-Visible="adminEditVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Admin</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <TextEdit Placeholder="Title" @bind-Text="@editableAdmin.Name" />
                <TextEdit Placeholder="Title" @bind-Text="@editableAdmin.Key" />
            </Form>
        </ModalBody>
        <ModalFooter>
            <Button Block Color="Color.Success" Clicked="()=>PutAdminAsync(editableAdmin)">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Row>
    <Column>
        <Heading>Пользователи</Heading>
    </Column>
</Row>
<Row>
    <Column>
        <Button Clicked="AddUserAsync" Block Color="Color.Success">Добавить пользователя</Button>
    </Column>
</Row>
<Row>
    <Column>
        @if (users == null)
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Загрузка...</AlertMessage>
            </Alert>
        }
        else if (!users.Any())
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Нет пользователей...</AlertMessage>
            </Alert>
        }
        else
        {
            <Table>
                <TableHeader>
                    <TableHeaderCell>Id</TableHeaderCell>
                    <TableHeaderCell>First Name</TableHeaderCell>
                    <TableHeaderCell>Last Name</TableHeaderCell>
                    <TableHeaderCell>Email</TableHeaderCell>
                    <TableHeaderCell>Password</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var user in users)
                    {
                        <TableRow>
                            <TableRowCell>@user.Id</TableRowCell>
                            <TableRowCell>@user.FirstName</TableRowCell>
                            <TableRowCell>@user.LastName</TableRowCell>
                            <TableRowCell>@user.Email</TableRowCell>
                            <TableRowCell>@user.Password</TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Primary" Clicked="()=>EditUserAsync(user)" Block>Edit</Button>
                            </TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Danger" Clicked="()=>DeleteUserAsync(user.Id)" Block>Delete</Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </Column>
</Row>
<Row>
    <Column>
        <Heading>Достижения</Heading>
    </Column>
</Row>
<Row>
    <Column>
        <Button Clicked="AddAchiveAsync" Block Color="Color.Success">Добавить задачу</Button>
    </Column>
</Row>
<Row>
    <Column>
        @if (achivements == null)
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Загрузка...</AlertMessage>
            </Alert>
        }
        else if (!achivements.Any())
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Нет ачивок...</AlertMessage>
            </Alert>
        }
        else
        {
            <Table>
                <TableHeader>
                    <TableHeaderCell>Id</TableHeaderCell>
                    <TableHeaderCell>XP</TableHeaderCell>
                    <TableHeaderCell>Title</TableHeaderCell>
                    <TableHeaderCell>Description</TableHeaderCell>
                    <TableHeaderCell>LogoURL</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var achive in achivements)
                    {
                        <TableRow>
                            <TableRowCell>@achive.Id</TableRowCell>
                            <TableRowCell>@achive.Xp</TableRowCell>
                            <TableRowCell>@achive.Title</TableRowCell>
                            <TableRowCell>@achive.Description</TableRowCell>
                            <TableRowCell>@achive.LogoURL</TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Primary" Clicked="()=>EditAchiveAsync(achive)" Block>Edit</Button>
                            </TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Danger" Clicked="()=>DeleteAchiveAsync(achive.Id)" Block>Delete</Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </Column>
</Row>
<Row>
    <Column>
        <Heading>Администраторы</Heading>
    </Column>
</Row>
<Row>
    <Column>
        <Button Clicked="AddAdminAsync" Block Color="Color.Success">Добавить админа</Button>
    </Column>
</Row>
<Row>
    <Column>
        @if (admins == null)
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Загрузка...</AlertMessage>
            </Alert>
        }
        else if (!admins.Any())
        {
            <Alert Color="Color.Info" Visible>
                <AlertMessage>Список админов пуст...</AlertMessage>
            </Alert>
        }
        else
        {
            <Table>
                <TableHeader>
                    <TableHeaderCell>Id</TableHeaderCell>
                    <TableHeaderCell>Name</TableHeaderCell>
                    <TableHeaderCell>Key</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var admin in admins)
                    {
                        <TableRow>
                            <TableRowCell>@admin.Id</TableRowCell>
                            <TableRowCell>@admin.Name</TableRowCell>
                            <TableRowCell>@admin.Key</TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Primary" Clicked="()=>EditAdminAsync(admin)" Block>Edit</Button>
                            </TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Danger" Clicked="()=>DeleteAdminAsync(admin.Id)" Block>Delete</Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </Column>
</Row>


@code {
    private string adminKey = "";
    private Modal loginModal;

    private bool userEditVisible = false;
    private User editableUser = new User();

    private bool achiveEditVisible = false;
    private Achive editableAchive = new Achive();

    private bool adminEditVisible = false;
    private Admin editableAdmin = new Admin();

    private User[] users;
    private Achive[] achivements;
    private Admin[] admins;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            loginModal.Show();
        }
    }

    private async void Login(string key)
    {
        if (await Http.GetFromJsonAsync<bool>("api/Admins/" + key))
        {
            await loginModal.Close(CloseReason.UserClosing);
            await ShowData();
        }
    }

    private void OnModalClosing(ModalClosingEventArgs e)
    {
        if (e.CloseReason != CloseReason.UserClosing)
        {
            e.Cancel = true;
        }
    }

    private async Task ShowData()
    {
        await UpdateUsersAsync();
        await UpdateAchivementsAsync();
        await UpdateAdminsAsync();
        StateHasChanged();
    }

    private async Task UpdateUsersAsync()
    {
        users = await Http.GetFromJsonAsync<User[]>("api/Users");
    }

    private async Task UpdateAchivementsAsync()
    {
        achivements = await Http.GetFromJsonAsync<Achive[]>("api/Achivements");
    }

    private async Task UpdateAdminsAsync()
    {
        admins = await Http.GetFromJsonAsync<Admin[]>("api/Admins");
    }

    #region User Crud

    private async Task AddUserAsync()
    {
        await Http.PostAsJsonAsync<User>("api/Users", new User() { FirstName = "Name", LastName = "Name1", Email = "Email", Password = "Password", CompletedAchivements = null });
        await UpdateUsersAsync();
    }

    private void EditUserAsync(User user)
    {
        editableUser = user;
        userEditVisible = true;
    }

    private async Task PutUserAsync(User user)
    {
        await Http.PutAsJsonAsync<User>("api/Users", user);
        await UpdateUsersAsync();
        userEditVisible = false;
    }

    private async Task DeleteUserAsync(int userId)
    {
        var responce = await Http.DeleteAsync($"api/Users/{userId}");
        await UpdateUsersAsync();
    }

    #endregion User Crud

    #region Achive Crud

    private async Task AddAchiveAsync()
    {
        await Http.PostAsJsonAsync<Achive>("api/Achivements", new Achive() { Title = "Title", Description = "Desc", Xp = 0, LogoURL = "nologo" });
        await UpdateAchivementsAsync();
    }

    private void EditAchiveAsync(Achive achive)
    {
        editableAchive = achive;
        achiveEditVisible = true;
    }

    private async Task PutAchiveAsync(Achive achive)
    {
        await Http.PutAsJsonAsync<Achive>("api/Achivements", achive);
        await UpdateAchivementsAsync();
        achiveEditVisible = false;
    }

    private async Task DeleteAchiveAsync(int achiveId)
    {
        var responce = await Http.DeleteAsync($"api/Achivements/{achiveId}");
        await UpdateAchivementsAsync();
    }

    #endregion Achive Crud

    #region Admin Crud

    private async Task AddAdminAsync()
    {
        await Http.PostAsJsonAsync<Admin>("api/Admins", new Admin() { Name = "Admin", Key = "Admin" });
        await UpdateAdminsAsync();
    }

    private void EditAdminAsync(Admin admin)
    {
        editableAdmin = admin;
        adminEditVisible = true;
    }

    private async Task PutAdminAsync(Admin admin)
    {
        await Http.PutAsJsonAsync<Admin>("api/Admins", admin);
        await UpdateAdminsAsync();
        adminEditVisible = false;
    }

    private async Task DeleteAdminAsync(int adminId)
    {
        var responce = await Http.DeleteAsync($"api/Admins/{adminId}");
        await UpdateAdminsAsync();
    }

    #endregion Admin Crud
}